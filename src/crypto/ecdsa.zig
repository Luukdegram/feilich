//! Elliptic Curve Digital Signature Algorithm (ECDSA) as specified
//! in [FIPS 186-4] (Digital Signature Standard).
//! https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf
//!
//! Also known as secp256r1 under SEC2.
//! https://www.secg.org/sec2-v2.pdf (page 9)
//!
//! NOTE: This implementation uses the P256 Curve and is not interchangable.

const std = @import("std");
const crypto = std.crypto;
const mem = std.mem;

/// The underlying elliptic curve.
pub const Curve = crypto.ecc.P256;
/// The length in bytes for the seed.
pub const seed_length = 32;

const Scalar = Curve.scalar.Scalar;
const Sha256 = crypto.hash.sha2.Sha256;

pub const KeyPair = struct {
    /// Private key component.
    d: Scalar,
    /// Public key belonging to this KeyPair
    public_key: PublicKey,

    pub const PublicKey = struct {
        /// Public key component x-coordinate.
        x: Curve.scalar.CompressedScalar,
        /// Public key component y-coordinate.
        y: Curve.scalar.CompressedScalar,

        /// Verifies if the given public keys are equivalent.
        pub fn eql(self: PublicKey, other: PublicKey) bool {
            return std.mem.eql(u8, &self.x, &other.x) and
                std.mem.eql(u8, &self.y, &other.y);
        }
    };

    /// Creates a new key pair using a provided seed or else
    /// generates a new seed and uses that instead.
    pub fn init(maybe_seed: ?[seed_length]u8) !KeyPair {
        const seed = maybe_seed orelse blk: {
            var random_seed: [seed_length]u8 = undefined;
            crypto.random.bytes(&random_seed);
            break :blk random_seed;
        };

        const q = try Curve.basePoint.mul(seed, .Little);
        const affine = q.affineCoordinates();

        return KeyPair{
            .d = try Scalar.fromBytes(seed, .Big),
            .public_key = .{
                .x = affine.x.toBytes(.Big),
                .y = affine.y.toBytes(.Big),
            },
        };
    }

    /// Verifies the given keypairs are equal
    pub fn eql(self: KeyPair, other: KeyPair) bool {
        return self.public_key.eql(other) and self.d.equivalent(other.d);
    }
};

/// Represents the signature of a message, that was signed using the private key
/// of ECDSA using the P256-curve.
pub const Signature = struct {
    /// The r-component of a signature.
    r_serialized: [32]u8,
    /// The s-component of a signature.
    s_serialized: [32]u8,

    /// Initializes a new Signature from serialized r and s values.
    ///
    /// User must ensure to input them as Big endian bytes
    ///
    /// Returns `error.NonCanonical` when the provided parameters are not canonical
    pub fn init(r_value: [32]u8, s_value: [32]u8) error{NonCanonical}!Signature {
        try Curve.scalar.rejectNonCanonical(r_value, .Big);
        try Curve.scalar.rejectNonCanonical(s_value, .Big);
        return .{ .r_serialized = r_value, .s_serialized = s_value };
    }

    /// Returns the `r` as a `Scalar`
    pub fn r(self: Signature) Scalar {
        return Scalar.fromBytes(self.r_serialized, .Big) catch unreachable;
    }

    /// Returns the `s` as a `Scalar`
    pub fn s(self: Signature) Scalar {
        return Scalar.fromBytes(self.s_serialized, .Big) catch unreachable;
    }

    /// Initializes a `Signature` from given `Scalar` 'r' & 's'
    pub fn fromScalars(r_scalar: Scalar, s_scalar: Scalar) Signature {
        return .{ .r_serialized = r_scalar.toBytes(.Big), .s_serialized = s_scalar.toBytes(.Big) };
    }
};

/// Possible errors when attempting to sign a message
pub const SignError = error{
    NonCanonical,
    IdentityElement,
    /// The provided scalar `k` is invalid
    InvalidEphemeralScalar,
    /// Computed 's' over 'r' and 'z' is 0.
    CouldNotCompute,
};

/// Signs a message, using the public key of the given `key_pair`.
/// Uses Sha256 to create the digest for the input `msg`.
///
/// Verification is done by using the inverse of scalar 'k'
pub fn sign(key_pair: KeyPair, k: Scalar, msg: []const u8) SignError!Signature {
    var digest: [Sha256.digest_length]u8 = undefined;
    Sha256.hash(msg, &digest, .{});
    const z = try Scalar.fromBytes(digest, .Big);

    const k_inverse = k.invert();

    if (k_inverse.isZero()) {
        return error.InvalidEphemeralScalar;
    }

    const q = try Curve.basePoint.mul(k.toBytes(.Little), .Little);
    const x = q.affineCoordinates().x;
    const r = try Scalar.fromBytes(x.toBytes(.Little), .Little);
    const s = key_pair.d.mul(r).add(z).mul(k_inverse);

    if (s.isZero()) {
        return error.CouldNotCompute;
    }

    return Signature.fromScalars(r, s);
}

/// Possible errors when verifying an error
pub const VerifyError = error{
    NonCanonical,
    InvalidEncoding,
    IdentityElement,
    /// The signature could not be verified using the public key,
    /// meaning it's an invalid signature.
    InvalidSignature,
};

/// Verifies a signature of the hash using a given `public_key`
pub fn verify(public_key: KeyPair.PublicKey, msg: []const u8, signature: Signature) VerifyError!void {
    var digest: [Sha256.digest_length]u8 = undefined;
    Sha256.hash(msg, &digest, .{});
    const z = try Scalar.fromBytes(digest, .Big);

    const r = signature.r();
    const s = signature.s();
    const s_inv = s.invert();
    const u_1 = z.mul(s_inv);
    const u_2 = r.mul(s_inv);

    const lhs = try Curve.basePoint.mulPublic(u_1.toBytes(.Little), .Little);
    const rhs = try (try Curve.fromSerializedAffineCoordinates(
        public_key.x,
        public_key.y,
        .Big,
    )).mulPublic(
        u_2.toBytes(.Little),
        .Little,
    );
    const x = lhs.add(rhs).affineCoordinates().x;

    if (!(try Scalar.fromBytes(x.toBytes(.Little), .Little)).equivalent(r)) {
        return error.InvalidSignature;
    }
}

test "KeyPair - eql" {
    var key_pair = try KeyPair.init(null);
    var public_key = (&key_pair.public_key).*; // ensure a copy

    try std.testing.expect(key_pair.public_key.eql(public_key));
}

test "verify" {
    const msg = [_]u8{
        0xe1, 0x13, 0x0a, 0xf6, 0xa3, 0x8c, 0xcb, 0x41, 0x2a, 0x9c, 0x8d, 0x13, 0xe1, 0x5d, 0xbf, 0xc9,
        0xe6, 0x9a, 0x16, 0x38, 0x5a, 0xf3, 0xc3, 0xf1, 0xe5, 0xda, 0x95, 0x4f, 0xd5, 0xe7, 0xc4, 0x5f,
        0xd7, 0x5e, 0x2b, 0x8c, 0x36, 0x69, 0x92, 0x28, 0xe9, 0x28, 0x40, 0xc0, 0x56, 0x2f, 0xbf, 0x37,
        0x72, 0xf0, 0x7e, 0x17, 0xf1, 0xad, 0xd5, 0x65, 0x88, 0xdd, 0x45, 0xf7, 0x45, 0x0e, 0x12, 0x17,
        0xad, 0x23, 0x99, 0x22, 0xdd, 0x9c, 0x32, 0x69, 0x5d, 0xc7, 0x1f, 0xf2, 0x42, 0x4c, 0xa0, 0xde,
        0xc1, 0x32, 0x1a, 0xa4, 0x70, 0x64, 0xa0, 0x44, 0xb7, 0xfe, 0x3c, 0x2b, 0x97, 0xd0, 0x3c, 0xe4,
        0x70, 0xa5, 0x92, 0x30, 0x4c, 0x5e, 0xf2, 0x1e, 0xed, 0x9f, 0x93, 0xda, 0x56, 0xbb, 0x23, 0x2d,
        0x1e, 0xeb, 0x00, 0x35, 0xf9, 0xbf, 0x0d, 0xfa, 0xfd, 0xcc, 0x46, 0x06, 0x27, 0x2b, 0x20, 0xa3,
    };

    const Qx = [_]u8{
        0xe4, 0x24, 0xdc, 0x61, 0xd4, 0xbb, 0x3c, 0xb7, 0xef, 0x43, 0x44, 0xa7, 0xf8, 0x95, 0x7a, 0x0c,
        0x51, 0x34, 0xe1, 0x6f, 0x7a, 0x67, 0xc0, 0x74, 0xf8, 0x2e, 0x6e, 0x12, 0xf4, 0x9a, 0xbf, 0x3c,
    };
    const Qy = [_]u8{
        0x97, 0x0e, 0xed, 0x7a, 0xa2, 0xbc, 0x48, 0x65, 0x15, 0x45, 0x94, 0x9d, 0xe1, 0xdd, 0xda, 0xf0,
        0x12, 0x7e, 0x59, 0x65, 0xac, 0x85, 0xd1, 0x24, 0x3d, 0x6f, 0x60, 0xe7, 0xdf, 0xae, 0xe9, 0x27,
    };

    const R = [_]u8{
        0xbf, 0x96, 0xb9, 0x9a, 0xa4, 0x9c, 0x70, 0x5c, 0x91, 0x0b, 0xe3, 0x31, 0x42, 0x01, 0x7c, 0x64,
        0x2f, 0xf5, 0x40, 0xc7, 0x63, 0x49, 0xb9, 0xda, 0xb7, 0x2f, 0x98, 0x1f, 0xd9, 0x34, 0x7f, 0x4f,
    };
    const S = [_]u8{
        0x17, 0xc5, 0x50, 0x95, 0x81, 0x90, 0x89, 0xc2, 0xe0, 0x3b, 0x9c, 0xd4, 0x15, 0xab, 0xdf, 0x12,
        0x44, 0x4e, 0x32, 0x30, 0x75, 0xd9, 0x8f, 0x31, 0x92, 0x0b, 0x9e, 0x0f, 0x57, 0xec, 0x87, 0x1c,
    };

    try verify(
        .{ .x = Qx, .y = Qy },
        &msg,
        .{ .r_serialized = R, .s_serialized = S },
    );
}

test "Sign" {
    const msg = [_]u8{
        0x59, 0x05, 0x23, 0x88, 0x77, 0xc7, 0x74, 0x21, 0xf7, 0x3e, 0x43, 0xee, 0x3d, 0xa6, 0xf2, 0xd9,
        0xe2, 0xcc, 0xad, 0x5f, 0xc9, 0x42, 0xdc, 0xec, 0x0c, 0xbd, 0x25, 0x48, 0x29, 0x35, 0xfa, 0xaf,
        0x41, 0x69, 0x83, 0xfe, 0x16, 0x5b, 0x1a, 0x04, 0x5e, 0xe2, 0xbc, 0xd2, 0xe6, 0xdc, 0xa3, 0xbd,
        0xf4, 0x6c, 0x43, 0x10, 0xa7, 0x46, 0x1f, 0x9a, 0x37, 0x96, 0x0c, 0xa6, 0x72, 0xd3, 0xfe, 0xb5,
        0x47, 0x3e, 0x25, 0x36, 0x05, 0xfb, 0x1d, 0xdf, 0xd2, 0x80, 0x65, 0xb5, 0x3c, 0xb5, 0x85, 0x8a,
        0x8a, 0xd2, 0x81, 0x75, 0xbf, 0x9b, 0xd3, 0x86, 0xa5, 0xe4, 0x71, 0xea, 0x7a, 0x65, 0xc1, 0x7c,
        0xc9, 0x34, 0xa9, 0xd7, 0x91, 0xe9, 0x14, 0x91, 0xeb, 0x37, 0x54, 0xd0, 0x37, 0x99, 0x79, 0x0f,
        0xe2, 0xd3, 0x08, 0xd1, 0x61, 0x46, 0xd5, 0xc9, 0xb0, 0xd0, 0xde, 0xbd, 0x97, 0xd7, 0x9c, 0xe8,
    };

    const d = [_]u8{
        0x51, 0x9b, 0x42, 0x3d, 0x71, 0x5f, 0x8b, 0x58, 0x1f, 0x4f, 0xa8, 0xee, 0x59, 0xf4, 0x77, 0x1a,
        0x5b, 0x44, 0xc8, 0x13, 0x0b, 0x4e, 0x3e, 0xac, 0xca, 0x54, 0xa5, 0x6d, 0xda, 0x72, 0xb4, 0x64,
    };

    const Qx = [_]u8{
        0x1c, 0xcb, 0xe9, 0x1c, 0x07, 0x5f, 0xc7, 0xf4, 0xf0, 0x33, 0xbf, 0xa2, 0x48, 0xdb, 0x8f, 0xcc,
        0xd3, 0x56, 0x5d, 0xe9, 0x4b, 0xbf, 0xb1, 0x2f, 0x3c, 0x59, 0xff, 0x46, 0xc2, 0x71, 0xbf, 0x83,
    };
    const Qy = [_]u8{
        0xce, 0x40, 0x14, 0xc6, 0x88, 0x11, 0xf9, 0xa2, 0x1a, 0x1f, 0xdb, 0x2c, 0x0e, 0x61, 0x13, 0xe0,
        0x6d, 0xb7, 0xca, 0x93, 0xb7, 0x40, 0x4e, 0x78, 0xdc, 0x7c, 0xcd, 0x5c, 0xa8, 0x9a, 0x4c, 0xa9,
    };
    const k = [_]u8{
        0x94, 0xa1, 0xbb, 0xb1, 0x4b, 0x90, 0x6a, 0x61, 0xa2, 0x80, 0xf2, 0x45, 0xf9, 0xe9, 0x3c, 0x7f,
        0x3b, 0x4a, 0x62, 0x47, 0x82, 0x4f, 0x5d, 0x33, 0xb9, 0x67, 0x07, 0x87, 0x64, 0x2a, 0x68, 0xde,
    };
    const R = [_]u8{
        0xf3, 0xac, 0x80, 0x61, 0xb5, 0x14, 0x79, 0x5b, 0x88, 0x43, 0xe3, 0xd6, 0x62, 0x95, 0x27, 0xed,
        0x2a, 0xfd, 0x6b, 0x1f, 0x6a, 0x55, 0x5a, 0x7a, 0xca, 0xbb, 0x5e, 0x6f, 0x79, 0xc8, 0xc2, 0xac,
    };
    const S = [_]u8{
        0x8b, 0xf7, 0x78, 0x19, 0xca, 0x05, 0xa6, 0xb2, 0x78, 0x6c, 0x76, 0x26, 0x2b, 0xf7, 0x37, 0x1c,
        0xef, 0x97, 0xb2, 0x18, 0xe9, 0x6f, 0x17, 0x5a, 0x3c, 0xcd, 0xda, 0x2a, 0xcc, 0x05, 0x89, 0x03,
    };

    const key_pair: KeyPair = .{
        .d = try Scalar.fromBytes(d, .Big),
        .public_key = .{ .x = Qx, .y = Qy },
    };

    const k_scalar = try Scalar.fromBytes(k, .Big);
    const signature = try sign(key_pair, k_scalar, &msg);

    try std.testing.expectEqualSlices(u8, &R, &signature.r_serialized);
    try std.testing.expectEqualSlices(u8, &S, &signature.s_serialized);
}
